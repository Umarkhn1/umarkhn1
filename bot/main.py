import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏)
user_data = {}

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")],
        [KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å LMS", web_app=types.WebAppInfo(url="https://lms.tuit.uz/auth/login"))]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
data_management_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç LMS. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
async def manage_data(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=data_management_keyboard)

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_data(message: Message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id]:
        data_text = "\n".join([f"üë§ {i+1}. –õ–æ–≥–∏–Ω: {d['login']}, –ü–∞—Ä–æ–ª—å: {d['password']}" for i, d in enumerate(user_data[user_id])])
        await message.answer(f"üìã –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{data_text}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_data_menu(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data or not user_data[user_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–≥–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    buttons = [KeyboardButton(text=d['login']) for d in user_data[user_id]]
    buttons.append(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    delete_keyboard = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_keyboard)

@dp.message(lambda message: message.text in [d['login'] for d in user_data.get(message.from_user.id, [])])
async def delete_selected_data(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = [d for d in user_data[user_id] if d['login'] != message.text]

    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ {message.text} —É–¥–∞–ª–µ–Ω—ã!", reply_markup=data_management_keyboard)

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def add_data(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_data and len(user_data[user_id]) >= 3:
        await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 3 –ª–æ–≥–∏–Ω–∞!")
        return

    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(UserState.waiting_for_login)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞

@dp.message(UserState.waiting_for_login)
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(UserState.waiting_for_password)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

@dp.message(UserState.waiting_for_password)
async def get_password(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    login = data['login']
    password = message.text

    if user_id not in user_data:
        user_data[user_id] = []
    user_data[user_id].append({"login": login, "password": password})

    await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nüë§ –õ–æ–≥–∏–Ω: {login}\nüîë –ü–∞—Ä–æ–ª—å: {password}", reply_markup=data_management_keyboard)
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
